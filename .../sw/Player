package Apollo;

import java.awt.*;

public class Player {

    static boolean skok =true;
    static int pocetSkok =0;
    static boolean pada = false;
    static boolean doubleJ = false;
    private static boolean horizontalCollision =false;
    private static boolean verticaCollision =false;
    private static int x=50,y=878,velX,velY, gravity=1;
    public void velX(int velX){this.velX=velX;}
    public void velY(int velY){this.velY=velY;}
    public void y(int y){this.y=y;}
    public int getY(){return y;}
    public int getX(){return x;}
    public int getW(){return 20;}
    public int getH(){return 40;}
    public void tick() {
        //move();
        falling();
        move();
        if(y<=0)y=0;
        if(y>=960-82){y=960-82;skok =true;doubleJ=false;pocetSkok=0;pada=false;}
        if(x<=0)x=0;
        if(x>=1440-32)x=1440-32;
        //falling();
    }
    public void move(){
        if(horizontalCollision&&verticaCollision)horizontalCollision=false;
        if(!hasHorizontalCollision())y+=velY;
        if(!hasVerticalCollision())x+=velX;
    }
    protected void falling(){
        //if(pada) {
            velY += gravity;
            if(velY>5)doubleJ=true;
            if(velY>8){velY=8;}
        //}
    }
    protected void jump(){
        if(skok&&pocetSkok<1){
            velY-=25;skok=false;pocetSkok++; }
        if(doubleJ&&pocetSkok==1){velY-=25;doubleJ=false;pocetSkok++;}
        pada=true;
    }
    Map map = new Map();
    protected boolean hasHorizontalCollision(){
        if(map.getBounds(x,y,20,40).intersects(map.getTop())&&velY>0){skok =true;doubleJ=false;pocetSkok=0;pada=false;return horizontalCollision =true;}

        if(map.getBounds(x,y,20,40).intersects(map.getBottom())&&velY<0){velY=0;skok =true;doubleJ=false;pocetSkok=0;pada=false;return verticaCollision =true;}
        return verticaCollision =false;
    }
    protected boolean hasVerticalCollision(){
        if(map.getBounds(x,y,20,40).intersects(map.getRight())&&velX<0){velX=0;return verticaCollision =true;}

        if(map.getBounds(x,y,20,40).intersects(map.getLeft())&&velX>0){velX=0;return verticaCollision =true;}
        return horizontalCollision=false;
    }

    public void render(Graphics g) {
        Graphics2D g2d = (Graphics2D)g;
        g2d.setColor(Color.RED);
        g2d.drawRect(x,y,20,40);
    }
}
