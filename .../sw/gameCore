package Apollo;

import java.awt.*;
import java.awt.image.BufferStrategy;

public class gameCore extends Canvas implements Runnable {
    public static final int width =720,height=480,scale=2;
    public static boolean running = false;
    public Thread gameThread;
    private Player player;
    private Map map;
    public void init(){
      player = new Player();
      map = new Map();
      this.addKeyListener(new KeyInput());
    }
    public synchronized void start(){
        if(running)return;
        running=true;
        gameThread =new Thread(this);
        gameThread.start();
    }
    public synchronized void stop(){
        if(!running)return;
        running=false;
        try { gameThread.join(); } catch (InterruptedException e) { e.printStackTrace(); }
    }
    @Override
    public void run() {
        requestFocus();
        init();
        long lastTime = System.nanoTime();
        final double amoutOfTicks =60D;
        double ns = 1000000000/amoutOfTicks;
        double delta =0;
        while(running){
            long now = System.nanoTime();
            delta+=(now-lastTime)/ns;
            lastTime=now;
            if(delta>=1){
                tick();
                render();
                delta--;
            }
        }
        stop();
    }
    public void tick(){
        player.tick();
    }
    public void render(){
        BufferStrategy bs = this.getBufferStrategy();
        if(bs==null){
            createBufferStrategy(3);
            return;
        }
        Graphics g = bs.getDrawGraphics();
        //
        g.fillRect(0,0,width*scale,height*scale);
        player.render(g);
        map.render(g);
        //
        g.dispose();
        bs.show();
    }
    public static void main(String[]args){
        gameCore game = new gameCore();
        game.setPreferredSize(new Dimension(width*scale,height*scale));
        new Window(width,height,scale,game);
        game.start();
    }
}
